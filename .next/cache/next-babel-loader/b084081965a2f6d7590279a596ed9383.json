{"ast":null,"code":"import { css } from 'styled-components';\nimport { Layout } from '../config/layout';\nimport { pxToEm } from './conversion';\n/* Example usage:\n ${LunaMedia.above('medium')`\n    background-color: black;\n  `}\n*/\n\nvar getSizeFromBreakpoint = function getSizeFromBreakpoint(breakpointValue) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (breakpoints[breakpointValue]) {\n    return breakpoints[breakpointValue];\n  }\n\n  if (parseInt(breakpointValue, 10)) {\n    return breakpointValue;\n  }\n\n  console.error('No valid breakpoint or size specified for media.');\n  return '0';\n};\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint Layout.breakpoint\n * @return {Object} - Media generators for each breakpoint\n */\n\n\nvar generateMedia = function generateMedia(breakpoints) {\n  var below = function below(breakpoint) {\n    return function () {\n      return css([\"@media (max-width:\", \"){\", \"}\"], pxToEm(getSizeFromBreakpoint(breakpoint, breakpoints) - 1), css.apply(void 0, arguments));\n    };\n  };\n\n  var above = function above(breakpoint) {\n    return function () {\n      return css([\"@media (min-width:\", \"){\", \"}\"], pxToEm(getSizeFromBreakpoint(breakpoint, breakpoints)), css.apply(void 0, arguments));\n    };\n  };\n\n  var between = function between(firstBreakpoint, secondBreakpoint) {\n    return function () {\n      return css([\"@media (min-width:\", \") and (max-width:\", \"){\", \"}\"], pxToEm(getSizeFromBreakpoint(firstBreakpoint, breakpoints)), pxToEm(getSizeFromBreakpoint(secondBreakpoint, breakpoints) - 1), css.apply(void 0, arguments));\n    };\n  };\n\n  return Object.assign({\n    below: below,\n    above: above,\n    between: between\n  });\n};\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\n\n\nvar LunaMedia = generateMedia(Layout.breakpoints);\nexport { LunaMedia };","map":{"version":3,"sources":["/Users/marcellegane/dev/kidsofcolour/Luna/utilities/mediaQueries.js"],"names":["css","Layout","pxToEm","getSizeFromBreakpoint","breakpointValue","breakpoints","parseInt","console","error","generateMedia","below","breakpoint","above","between","firstBreakpoint","secondBreakpoint","Object","assign","LunaMedia"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;;;;;;AAMA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,eAAD,EAAuC;AAAA,MAArBC,WAAqB,uEAAP,EAAO;;AACnE,MAAIA,WAAW,CAACD,eAAD,CAAf,EAAkC;AAChC,WAAOC,WAAW,CAACD,eAAD,CAAlB;AACD;;AACD,MAAIE,QAAQ,CAACF,eAAD,EAAkB,EAAlB,CAAZ,EAAmC;AACjC,WAAOA,eAAP;AACD;;AACDG,EAAAA,OAAO,CAACC,KAAR,CAAc,kDAAd;AACA,SAAO,GAAP;AACD,CATD;AAWA;;;;;;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAJ,WAAW,EAAI;AACnC,MAAMK,KAAK,GAAG,SAARA,KAAQ,CAAAC,UAAU;AAAA,WAAI;AAAA,aAAaX,GAAb,oCACLE,MAAM,CACvBC,qBAAqB,CAACQ,UAAD,EAAaN,WAAb,CAArB,GAAiD,CAD1B,CADD,EAItBL,GAAG,MAAH,mBAJsB;AAAA,KAAJ;AAAA,GAAxB;;AAQA,MAAMY,KAAK,GAAG,SAARA,KAAQ,CAAAD,UAAU;AAAA,WAAI;AAAA,aAAaX,GAAb,oCACLE,MAAM,CACvBC,qBAAqB,CAACQ,UAAD,EAAaN,WAAb,CADE,CADD,EAItBL,GAAG,MAAH,mBAJsB;AAAA,KAAJ;AAAA,GAAxB;;AAQA,MAAMa,OAAO,GAAG,SAAVA,OAAU,CAACC,eAAD,EAAkBC,gBAAlB;AAAA,WAAuC;AAAA,aAAaf,GAAb,yDAChCE,MAAM,CACvBC,qBAAqB,CAACW,eAAD,EAAkBT,WAAlB,CADE,CAD0B,EAG7BH,MAAM,CAC1BC,qBAAqB,CAACY,gBAAD,EAAmBV,WAAnB,CAArB,GAAuD,CAD7B,CAHuB,EAMjDL,GAAG,MAAH,mBANiD;AAAA,KAAvC;AAAA,GAAhB;;AAUA,SAAOgB,MAAM,CAACC,MAAP,CAAc;AACnBP,IAAAA,KAAK,EAALA,KADmB;AAEnBE,IAAAA,KAAK,EAALA,KAFmB;AAGnBC,IAAAA,OAAO,EAAPA;AAHmB,GAAd,CAAP;AAKD,CAhCD;AAkCA;;;;;;AAKA,IAAMK,SAAS,GAAGT,aAAa,CAACR,MAAM,CAACI,WAAR,CAA/B;AAEA,SAASa,SAAT","sourcesContent":["import { css } from 'styled-components'\nimport { Layout } from '../config/layout'\nimport { pxToEm } from './conversion'\n\n/* Example usage:\n ${LunaMedia.above('medium')`\n    background-color: black;\n  `}\n*/\n\nconst getSizeFromBreakpoint = (breakpointValue, breakpoints = {}) => {\n  if (breakpoints[breakpointValue]) {\n    return breakpoints[breakpointValue]\n  }\n  if (parseInt(breakpointValue, 10)) {\n    return breakpointValue\n  }\n  console.error('No valid breakpoint or size specified for media.')\n  return '0'\n}\n\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint Layout.breakpoint\n * @return {Object} - Media generators for each breakpoint\n */\nconst generateMedia = breakpoints => {\n  const below = breakpoint => (...args) => css`\n    @media (max-width: ${pxToEm(\n        getSizeFromBreakpoint(breakpoint, breakpoints) - 1\n      )}) {\n      ${css(...args)}\n    }\n  `\n\n  const above = breakpoint => (...args) => css`\n    @media (min-width: ${pxToEm(\n        getSizeFromBreakpoint(breakpoint, breakpoints)\n      )}) {\n      ${css(...args)}\n    }\n  `\n\n  const between = (firstBreakpoint, secondBreakpoint) => (...args) => css`\n    @media (min-width: ${pxToEm(\n        getSizeFromBreakpoint(firstBreakpoint, breakpoints)\n      )}) and (max-width: ${pxToEm(\n        getSizeFromBreakpoint(secondBreakpoint, breakpoints) - 1\n      )}) {\n      ${css(...args)}\n    }\n  `\n\n  return Object.assign({\n    below,\n    above,\n    between,\n  })\n}\n\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\n\nconst LunaMedia = generateMedia(Layout.breakpoints)\n\nexport { LunaMedia }\n"]},"metadata":{},"sourceType":"module"}