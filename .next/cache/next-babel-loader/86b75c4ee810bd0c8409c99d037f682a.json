{"ast":null,"code":"import { css } from 'styled-components';\nimport { Layout } from '../config/layout';\nimport { pxToEm } from './conversion';\n/* Example usage:\n ${LunaMedia.above('medium')`\n    background-color: black;\n  `}\n*/\n\nconst getSizeFromBreakpoint = (breakpointValue, breakpoints = {}) => {\n  if (breakpoints[breakpointValue]) {\n    return breakpoints[breakpointValue];\n  }\n\n  if (parseInt(breakpointValue, 10)) {\n    return breakpointValue;\n  }\n\n  console.error('No valid breakpoint or size specified for media.');\n  return '0';\n};\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint Layout.breakpoint\n * @return {Object} - Media generators for each breakpoint\n */\n\n\nconst generateMedia = breakpoints => {\n  const below = breakpoint => (...args) => css([\"@media (max-width:\", \"){\", \"}\"], pxToEm(getSizeFromBreakpoint(breakpoint, breakpoints) - 1), css(...args));\n\n  const above = breakpoint => (...args) => css([\"@media (min-width:\", \"){\", \"}\"], pxToEm(getSizeFromBreakpoint(breakpoint, breakpoints)), css(...args));\n\n  const between = (firstBreakpoint, secondBreakpoint) => (...args) => css([\"@media (min-width:\", \") and (max-width:\", \"){\", \"}\"], pxToEm(getSizeFromBreakpoint(firstBreakpoint, breakpoints)), pxToEm(getSizeFromBreakpoint(secondBreakpoint, breakpoints) - 1), css(...args));\n\n  return Object.assign({\n    below,\n    above,\n    between\n  });\n};\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\n\n\nconst LunaMedia = generateMedia(Layout.breakpoints);\nexport { LunaMedia };","map":{"version":3,"sources":["/Users/marcellegane/dev/kidsofcolour/Luna/utilities/mediaQueries.js"],"names":["css","Layout","pxToEm","getSizeFromBreakpoint","breakpointValue","breakpoints","parseInt","console","error","generateMedia","below","breakpoint","args","above","between","firstBreakpoint","secondBreakpoint","Object","assign","LunaMedia"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;;;;;;AAMA,MAAMC,qBAAqB,GAAG,CAACC,eAAD,EAAkBC,WAAW,GAAG,EAAhC,KAAuC;AACnE,MAAIA,WAAW,CAACD,eAAD,CAAf,EAAkC;AAChC,WAAOC,WAAW,CAACD,eAAD,CAAlB;AACD;;AACD,MAAIE,QAAQ,CAACF,eAAD,EAAkB,EAAlB,CAAZ,EAAmC;AACjC,WAAOA,eAAP;AACD;;AACDG,EAAAA,OAAO,CAACC,KAAR,CAAc,kDAAd;AACA,SAAO,GAAP;AACD,CATD;AAWA;;;;;;;AAKA,MAAMC,aAAa,GAAGJ,WAAW,IAAI;AACnC,QAAMK,KAAK,GAAGC,UAAU,IAAI,CAAC,GAAGC,IAAJ,KAAaZ,GAAb,oCACLE,MAAM,CACvBC,qBAAqB,CAACQ,UAAD,EAAaN,WAAb,CAArB,GAAiD,CAD1B,CADD,EAItBL,GAAG,CAAC,GAAGY,IAAJ,CAJmB,CAA5B;;AAQA,QAAMC,KAAK,GAAGF,UAAU,IAAI,CAAC,GAAGC,IAAJ,KAAaZ,GAAb,oCACLE,MAAM,CACvBC,qBAAqB,CAACQ,UAAD,EAAaN,WAAb,CADE,CADD,EAItBL,GAAG,CAAC,GAAGY,IAAJ,CAJmB,CAA5B;;AAQA,QAAME,OAAO,GAAG,CAACC,eAAD,EAAkBC,gBAAlB,KAAuC,CAAC,GAAGJ,IAAJ,KAAaZ,GAAb,yDAChCE,MAAM,CACvBC,qBAAqB,CAACY,eAAD,EAAkBV,WAAlB,CADE,CAD0B,EAG7BH,MAAM,CAC1BC,qBAAqB,CAACa,gBAAD,EAAmBX,WAAnB,CAArB,GAAuD,CAD7B,CAHuB,EAMjDL,GAAG,CAAC,GAAGY,IAAJ,CAN8C,CAAvD;;AAUA,SAAOK,MAAM,CAACC,MAAP,CAAc;AACnBR,IAAAA,KADmB;AAEnBG,IAAAA,KAFmB;AAGnBC,IAAAA;AAHmB,GAAd,CAAP;AAKD,CAhCD;AAkCA;;;;;;AAKA,MAAMK,SAAS,GAAGV,aAAa,CAACR,MAAM,CAACI,WAAR,CAA/B;AAEA,SAASc,SAAT","sourcesContent":["import { css } from 'styled-components'\nimport { Layout } from '../config/layout'\nimport { pxToEm } from './conversion'\n\n/* Example usage:\n ${LunaMedia.above('medium')`\n    background-color: black;\n  `}\n*/\n\nconst getSizeFromBreakpoint = (breakpointValue, breakpoints = {}) => {\n  if (breakpoints[breakpointValue]) {\n    return breakpoints[breakpointValue]\n  }\n  if (parseInt(breakpointValue, 10)) {\n    return breakpointValue\n  }\n  console.error('No valid breakpoint or size specified for media.')\n  return '0'\n}\n\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint Layout.breakpoint\n * @return {Object} - Media generators for each breakpoint\n */\nconst generateMedia = breakpoints => {\n  const below = breakpoint => (...args) => css`\n    @media (max-width: ${pxToEm(\n        getSizeFromBreakpoint(breakpoint, breakpoints) - 1\n      )}) {\n      ${css(...args)}\n    }\n  `\n\n  const above = breakpoint => (...args) => css`\n    @media (min-width: ${pxToEm(\n        getSizeFromBreakpoint(breakpoint, breakpoints)\n      )}) {\n      ${css(...args)}\n    }\n  `\n\n  const between = (firstBreakpoint, secondBreakpoint) => (...args) => css`\n    @media (min-width: ${pxToEm(\n        getSizeFromBreakpoint(firstBreakpoint, breakpoints)\n      )}) and (max-width: ${pxToEm(\n        getSizeFromBreakpoint(secondBreakpoint, breakpoints) - 1\n      )}) {\n      ${css(...args)}\n    }\n  `\n\n  return Object.assign({\n    below,\n    above,\n    between,\n  })\n}\n\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\n\nconst LunaMedia = generateMedia(Layout.breakpoints)\n\nexport { LunaMedia }\n"]},"metadata":{},"sourceType":"module"}